/******/ (() => { // webpackBootstrap
/******/ 	"use strict";
/******/ 	var __webpack_modules__ = ({

/***/ 29711:
/***/ ((__unused_webpack_module, __unused_webpack___webpack_exports__, __webpack_require__) => {


// EXTERNAL MODULE: ./node_modules/core-js/stable/index.js
var stable = __webpack_require__(28594);
// EXTERNAL MODULE: ./node_modules/regenerator-runtime/runtime.js
var runtime = __webpack_require__(35666);
;// CONCATENATED MODULE: ./src/spinner.js
//  articleSection 은 spinner_area 을 감싸고 있는 부모 태그 요소이다.

function createSpinner(parent) {
  try {
    const spinnerAreaEl = parent.querySelector(".spinner_area");
    const imageEl = document.createElement("img");
    imageEl.alt = "spinner";
    imageEl.src = "./assets/gif/spin.gif";
    spinnerAreaEl.append(imageEl);
  } catch (error) {
    console.error(error);
  }
}
;// CONCATENATED MODULE: ./src/render/topnewsrender.js
const topNewsRender = articleEl => {
  const {
    link,
    title,
    summary,
    thumbnailImage
  } = articleEl;
  const aEl = document.createElement("a");
  aEl.setAttribute("href", link);
  aEl.insertAdjacentHTML("beforeend", `<article class="content_area">
        <div class ="text_area">
          <h2>${title}</h2>
          <p>${summary}</p>
        </div>
        <img 
            class ="thumbnail"
            src ='${thumbnailImage}' alt='news_image'>
     </article>
    `);
  return aEl;
};
;// CONCATENATED MODULE: ./src/render/latestRender.js
const latestRender = latestEl => {
  const {
    title,
    link,
    summary
  } = latestEl;
  const aEl = document.createElement("a");
  aEl.setAttribute("href", link);
  aEl.insertAdjacentHTML("beforeend", `
    <article class ="latest_content_area">
    <h4 class ="latest_content_title">${title}</h4>
    <p class ="latest_content_text">${summary}</p>
    </article>
     `);
  return aEl;
};
;// CONCATENATED MODULE: ./src/main.js






(function () {
  //로딩 상태
  const $aside = document.getElementById('aside');
  let loading = true;
  // 좌측 상단 Top News 부분의 콘텐츠
  const renderTopNews = () => {
    const topNewsList = document.getElementById("topNewList");
    if (loading) {
      createSpinner(topNewsList);
    }
    fetch("./assets/data/json/top.json").then(res => {
      if (res.ok) return res.json();
    }).then(data => {
      const setData = data.articles.map(newEl => {
        return topNewsRender(newEl, topNewsList);
      });
      topNewsList.append(...setData);
    }).finally(() => {
      // 로딩이 완료 되었으면 promise.finally 를 사용하여 마지막에 제거해준다.
      const spinnerArea = document.querySelector(".top_news_section .spinner_area");
      spinnerArea.style.display = "none";
    }).catch(console.error);
  };

  // 우측 상단 최신글 영역
  const renderLatestNews = () => {
    const latestNewList = document.getElementById("latest_new_list");
    fetch("./assets/data/json/latest.json").then(res => {
      if (res.ok) return res.json();
    }).then(data => {
      //json 데이터를 map 메서드로 순회하여 각 콘텐츠 내용별로 그려준다.
      const setData = data.articles.map(articlesEl => {
        return latestRender(articlesEl);
      });
      // 앞서 setData에 담겨 있는 콘텐츠 내용이 담긴 a 태그 요소를 추가할 필요가
      // 부모 태그의 자식요소로 추가한다.
      latestNewList.append(...setData);
    }).finally(() => {
      // 로딩이 완료 되었으면 promise.finally 를 사용하여 마지막에 제거해준다.
      const spinnerArea = document.querySelector(".latest_section .spinner_area");
      spinnerArea.style.display = "none";
    }).catch(console.error);
    createSpinner(latestNewList);
  };

  //aside 템 숨기기/나타나기
  const hideBtn = document.getElementById("hide_btn");
  let hideState = false;
  const hide = () => {
    $aside.classList.toggle('hide');
    hideState = !hideState;
    hideState ? hideBtn.innerText = "<<" : hideBtn.innerText = ">>";
  };

  // 'DOMContentLoaded' : HTML 요소를 브라우저가 모두 파싱하는 즉시 실행(css, img 제외)
  document.addEventListener("DOMContentLoaded", () => {
    renderTopNews();
    renderLatestNews();
  });
  hideBtn.addEventListener("click", hide);
})();

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId](module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = __webpack_modules__;
/******/ 	
/************************************************************************/
/******/ 	/* webpack/runtime/chunk loaded */
/******/ 	(() => {
/******/ 		var deferred = [];
/******/ 		__webpack_require__.O = (result, chunkIds, fn, priority) => {
/******/ 			if(chunkIds) {
/******/ 				priority = priority || 0;
/******/ 				for(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];
/******/ 				deferred[i] = [chunkIds, fn, priority];
/******/ 				return;
/******/ 			}
/******/ 			var notFulfilled = Infinity;
/******/ 			for (var i = 0; i < deferred.length; i++) {
/******/ 				var [chunkIds, fn, priority] = deferred[i];
/******/ 				var fulfilled = true;
/******/ 				for (var j = 0; j < chunkIds.length; j++) {
/******/ 					if ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every((key) => (__webpack_require__.O[key](chunkIds[j])))) {
/******/ 						chunkIds.splice(j--, 1);
/******/ 					} else {
/******/ 						fulfilled = false;
/******/ 						if(priority < notFulfilled) notFulfilled = priority;
/******/ 					}
/******/ 				}
/******/ 				if(fulfilled) {
/******/ 					deferred.splice(i--, 1)
/******/ 					var r = fn();
/******/ 					if (r !== undefined) result = r;
/******/ 				}
/******/ 			}
/******/ 			return result;
/******/ 		};
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/global */
/******/ 	(() => {
/******/ 		__webpack_require__.g = (function() {
/******/ 			if (typeof globalThis === 'object') return globalThis;
/******/ 			try {
/******/ 				return this || new Function('return this')();
/******/ 			} catch (e) {
/******/ 				if (typeof window === 'object') return window;
/******/ 			}
/******/ 		})();
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/hasOwnProperty shorthand */
/******/ 	(() => {
/******/ 		__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))
/******/ 	})();
/******/ 	
/******/ 	/* webpack/runtime/jsonp chunk loading */
/******/ 	(() => {
/******/ 		// no baseURI
/******/ 		
/******/ 		// object to store loaded and loading chunks
/******/ 		// undefined = chunk not loaded, null = chunk preloaded/prefetched
/******/ 		// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded
/******/ 		var installedChunks = {
/******/ 			179: 0
/******/ 		};
/******/ 		
/******/ 		// no chunk on demand loading
/******/ 		
/******/ 		// no prefetching
/******/ 		
/******/ 		// no preloaded
/******/ 		
/******/ 		// no HMR
/******/ 		
/******/ 		// no HMR manifest
/******/ 		
/******/ 		__webpack_require__.O.j = (chunkId) => (installedChunks[chunkId] === 0);
/******/ 		
/******/ 		// install a JSONP callback for chunk loading
/******/ 		var webpackJsonpCallback = (parentChunkLoadingFunction, data) => {
/******/ 			var [chunkIds, moreModules, runtime] = data;
/******/ 			// add "moreModules" to the modules object,
/******/ 			// then flag all "chunkIds" as loaded and fire callback
/******/ 			var moduleId, chunkId, i = 0;
/******/ 			if(chunkIds.some((id) => (installedChunks[id] !== 0))) {
/******/ 				for(moduleId in moreModules) {
/******/ 					if(__webpack_require__.o(moreModules, moduleId)) {
/******/ 						__webpack_require__.m[moduleId] = moreModules[moduleId];
/******/ 					}
/******/ 				}
/******/ 				if(runtime) var result = runtime(__webpack_require__);
/******/ 			}
/******/ 			if(parentChunkLoadingFunction) parentChunkLoadingFunction(data);
/******/ 			for(;i < chunkIds.length; i++) {
/******/ 				chunkId = chunkIds[i];
/******/ 				if(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {
/******/ 					installedChunks[chunkId][0]();
/******/ 				}
/******/ 				installedChunks[chunkId] = 0;
/******/ 			}
/******/ 			return __webpack_require__.O(result);
/******/ 		}
/******/ 		
/******/ 		var chunkLoadingGlobal = self["webpackChunknewspaper"] = self["webpackChunknewspaper"] || [];
/******/ 		chunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));
/******/ 		chunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));
/******/ 	})();
/******/ 	
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module depends on other loaded chunks and execution need to be delayed
/******/ 	var __webpack_exports__ = __webpack_require__.O(undefined, [806], () => (__webpack_require__(29711)))
/******/ 	__webpack_exports__ = __webpack_require__.O(__webpack_exports__);
/******/ 	
/******/ })()
;